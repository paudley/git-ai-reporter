#!/bin/bash
# Pre-push hook for git-ai-reporter
# Ensures all tests pass and comprehensive coverage is maintained before pushing
# Enhanced with comprehensive security and quality validation

set -e

echo "üöÄ Running pre-push checks..."
echo "This may take a minute..."
echo ""

# Function to check if we're in a virtual environment
check_venv() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "‚ö†Ô∏è  Warning: No virtual environment detected. Activating .venv..."
        if [ -f .venv/bin/activate ]; then
            source .venv/bin/activate
        else
            echo "‚ùå No .venv found. Please create virtual environment first."
            exit 1
        fi
    fi
}

# Ensure we're in venv
check_venv

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Store the name of the current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "üìå Checking branch: $BRANCH"
echo ""

# Run comprehensive security scan on all Python files
echo "üîí Running comprehensive security scan..."
ALL_PY_FILES=$(find "$PROJECT_ROOT/src" "$PROJECT_ROOT/tests" -name "*.py" -type f 2>/dev/null | head -100)
if [ -f "$PROJECT_ROOT/scripts/security-scan.sh" ]; then
    if ! "$PROJECT_ROOT/scripts/security-scan.sh" $ALL_PY_FILES; then
        echo ""
        echo "‚ùå Security vulnerabilities detected!"
        echo "Please fix security issues before pushing."
        exit 1
    fi
fi
echo ""

# Run quality checks for the entire codebase
echo "üìã Running comprehensive quality validation..."
if [ -f "$PROJECT_ROOT/scripts/check-quality.sh" ]; then
    # Check branch protection
    if ! "$PROJECT_ROOT/scripts/check-quality.sh" branch; then
        echo ""
        echo "‚ùå Cannot push directly to protected branch!"
        echo "Please create a feature branch and use pull requests."
        exit 1
    fi
    
    # Check all source files for quality issues
    if ! "$PROJECT_ROOT/scripts/check-quality.sh" all $ALL_PY_FILES; then
        echo ""
        echo "‚ö†Ô∏è  Quality warnings detected. Consider fixing before push."
        # Don't fail on warnings for push, just inform
    fi
fi
echo ""

# Run the full lint check
echo "üîß Running comprehensive lint check..."
if ! ./scripts/lint.sh; then
    echo ""
    echo "‚ùå Lint check failed!"
    echo "Please fix all lint issues before pushing."
    echo "Run './scripts/lint.sh' to see all issues."
    exit 1
fi
echo "‚úÖ All lint checks passed (10.00/10 score maintained)"
echo ""

# Run the test suite with coverage
echo "üß™ Running test suite with coverage check..."
echo "================================="

# Create a temporary file to capture pytest output
PYTEST_OUTPUT=$(mktemp)

# Run pytest and capture output
if uv run pytest --cov=src --cov-report=term --cov-fail-under=100 -q > "$PYTEST_OUTPUT" 2>&1; then
    # Tests passed, show summary
    echo "‚úÖ All tests passed!"
    
    # Extract and show coverage percentage
    COVERAGE_LINE=$(grep "^TOTAL" "$PYTEST_OUTPUT" || echo "Coverage data not found")
    echo ""
    echo "üìä Coverage Report:"
    echo "  $COVERAGE_LINE"
    
    # Check if comprehensive coverage was maintained
    if grep -q "Required test coverage of 100% reached" "$PYTEST_OUTPUT"; then
        echo "  ‚úÖ Comprehensive coverage maintained!"
    else
        echo ""
        echo "‚ö†Ô∏è  Warning: Coverage might be below expected level"
        echo "Full output:"
        cat "$PYTEST_OUTPUT"
        rm "$PYTEST_OUTPUT"
        exit 1
    fi
else
    # Tests failed, show the output
    echo "‚ùå Tests failed!"
    echo ""
    echo "Test output:"
    echo "================================="
    cat "$PYTEST_OUTPUT"
    rm "$PYTEST_OUTPUT"
    echo "================================="
    echo ""
    echo "Please fix failing tests before pushing."
    exit 1
fi

# Clean up temp file
rm -f "$PYTEST_OUTPUT"

echo ""
echo "================================="
echo "‚úÖ All pre-push checks passed!"
echo "  ‚Ä¢ Lint: 10.00/10"
echo "  ‚Ä¢ Tests: All passing" 
echo "  ‚Ä¢ Coverage: 100%"
echo "================================="
echo ""
echo "üöÄ Ready to push to $BRANCH"
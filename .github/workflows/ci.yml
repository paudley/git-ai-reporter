name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.13']
        
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: |
        uv pip install -e .[dev]
        
    - name: Lint and format code
      run: |
        ./scripts/lint.sh
        
    - name: Test with pytest
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        uv run pytest tests/ -v --cov=src/git_ai_reporter --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        
    - name: Install security tools
      run: |
        uv tool install bandit[toml]
        uv tool install safety
        
    - name: Run Bandit security scan
      run: |
        uv tool run bandit -r src/ -f json -o bandit-report.json
        
    - name: Check dependencies for vulnerabilities
      run: |
        uv tool run safety check --json
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30
        
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      attestations: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        
    - name: Install build dependencies
      run: |
        uv tool install twine
        
    - name: Build package
      run: |
        uv build
        
    - name: Check package
      run: |
        uv tool run twine check dist/*
        
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'dist/*'
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30